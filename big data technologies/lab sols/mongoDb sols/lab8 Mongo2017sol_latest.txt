1.Create an index on the cust_id
SOl
db.customers.createIndex( { "cust_id": 1 } )

2. Display name, city of residence, salesamount and object Id
SOl
db.customers.find(
    { },
    { "name": 1, "cityResidence": 1, "sales_totalamount":1, "_id": 1 }
)

3.Display the names of the male customers that have  sales amount  > €350 [hint use the $gt: operator ].
SOl
db.customers.find(
    {"gender":"male",
     "sales_totalamount":{$gt:350 }},
    { "name": 1 ,"_id":0}
)

4.Display the names of customers, gender and sales amount for customers who are either male or female and have sales less than €2350 
[hint use the $or: operator  for gender and $lt for sales_totalamount].
SOl
db.customers.find(
    {$or:[{"gender":"female"},{"gender":"f"},{"gender":"male"}],
    "sales_totalamount":{$lt:2350 }},
    { "name": 1 ,"sales_totalamount":1, "_id":0}
)

5.Display  the names of customers and their ages that are aged between 20 and 35 inclusive and are resident in dublin [hint $gte and $lte operator are useful here].
SOl
db.customers.find(
    {"cityResidence":"dublin",
     "age":{$gte:20, $lte:35 }
    },
    { "name": 1, "cityResidence":1, "_id":0 }
)

6. Add a new field called domestic_sales to each of the documents with a default value of true
SOl

db.customers.update(
    { },
    { $set: { "domestic_sales":"true"  } },
    { "multi": true }
)
7. Find the unique values for cityResidence
db.customers.distinct( "cityResidence" )

8. Let us find the documents with stats for the month of March that have bonusTokens between 1 and 15 (exclusive)
Access fields in the array.....

db.customers.find(
    {  $and: [{"stats.month":"Mar"}, 
              {"stats.bonusTokens":{$gt:1}},
             {"stats.bonusTokens":{$lt:15}}]}).pretty()

--You should notice it returns documents that have any elements in the 
-- array that meet this criteria. Note for March bonusTokens were 22!


Let us use $elemMatch to get the correct result!
db.customers.find(
    { "stats":{$elemMatch: {"month":"Mar", "bonusTokens":{$gt:1},
      "bonusTokens":{$lt:15}}}
    }).pretty()

-- Note no document is returned as there is no match in the stats array

Let us change the value to 23 so it does return the document

   db.customers.find(
    { "stats":{$elemMatch: {"month":"Mar", "bonusTokens":{$gt:1},
      "bonusTokens":{$lt:23}}}
    }).pretty()

-- What if you what to see the row in the array and not the whole document:

  db.customers.find(
    { "stats":{$elemMatch: {"month":"Mar", "bonusTokens":{$gt:1},
      "bonusTokens":{$lt:23}}}
    }, { "stats.month.$":1}).pretty()

9. Find the customer names where the bonusTokens is less that 30 and 
  clicks is greater than 20 for March 
SOl
-- a first attempt
db.customers.find(
    { "stats.month":"Mar", "stats.bonusTokens":{$lt:30},"stats.noClicks":{$gt:20}},
    { "_id":0, "name":1}).pretty()

The correct way!
db.customers.find(
    { "stats":{$elemMatch: { "month":"Mar","bonusTokens":{$lt:30},"noClicks":{$gt:20}}}},
    { "_id":0, "name":1}).pretty()


10. How many customers are there?
Sol
db.customers.count( { } )

OR

db.customers.find( { }  ).count()
OR

db.customers.find( ).count()

11. How many customers are domestic?

Sol
db.customers.count( { "domestic_sales":"true" }  )

OR

db.customers.find( { "domestic_sales":"true" }  ).count()

12.Create a new customer with a cust_id of C343, domestic_sales=false, name=SportsWorld, contact=pat hayes, cityResidence=cork, sales_totalamount=25000

db.customers.insertOne(
{"cust_id":"C343", 
 "name":"sportsworld",
 "noOrders":3,
 "contact":"pat hayes",
 "cityResidence":"cork",
 "sales_totalamount":25000 
} 
)

13. Update the number of orders to 3 and increase the sales amount by 2300 for customer A21. Check that the changes have occurred
SOl

db.customers.find({"cust_id":"A21"},{"noOrders":1,"sales_totalamount":1})

db.customers.update(
   {"cust_id": "A21" },
   {
      $set: { "noOrders": 3 },
      $inc: { "sales_totalamount": 2300 }
   }
)

db.customers.find({"cust_id":"A21"},{"noOrders":1,"sales_totalamount":1})


14. Delete your customer that has an id of B31
SOl
db.customers.remove( { "cust_id": "B31" } )

db.customers.find({"cust_id":"B31"})


15.
Search for a customer with a cust_id of B21. Was an Index used?
db.customers.find( { "cust_id": "B21" } ).explain()

Subset of Output which  shows  index cust_id_1 was used by the winning plan.
"winningPlan" : {
        "stage" : "FETCH",
        "inputStage" : {
                "stage" : "IXSCAN",
                "keyPattern" : {
                        "cust_id" : 1
                },
                "indexName" : "cust_id_1",
                "isMultiKey" : false,
                "isUnique" : false,
                "isSparse" : false,
                "isPartial" : false,
                "indexVersion" : 1,
                "direction" : "forward",
                "indexBounds" : {
                        "cust_id" : [
                                "[\"B21\", \"B21\"]"
                        ]
                }
        }}

16.
Search for a customer called sportsworld. Was an Index used?
SOl

db.customers.find( { "name": "sportsworld" } ).explain()

Subset of Output which  shows no index was used as a full collection scan was carried out.
"winningPlan" : {
        "stage" : "COLLSCAN",
        "filter" : {
                "name" : {
                        "$eq" : "sportsworld"
                }
        }












